#!/usr/bin/env python3
"""
Utility module to set the RF_MUTE signals
"""
# -----------------------------------------------------------------------------
# Copyright (c) 2020, Kirintec
#
# -----------------------------------------------------------------------------
"""
OPTIONS ------------------------------------------------------------------
None

ARGUMENTS -------------------------------------------------------------
None
"""

# -----------------------------------------------------------------------------
# Imports
# -----------------------------------------------------------------------------

# stdlib imports -------------------------------------------------------
import logging
import sys

# Third-party imports -----------------------------------------------
from dev_mem import *

# Our own imports ---------------------------------------------------

# -----------------------------------------------------------------------------
# GLOBALS
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# CONSTANTS
# -----------------------------------------------------------------------------
REG_GPIO_0_ADDRESS = 0x4000A000
REG_GPIO_0_PB_CTRL_IRQ_BIT = 13

# -----------------------------------------------------------------------------
# LOCAL UTILITIES
# -----------------------------------------------------------------------------
log = logging.getLogger(__name__)
log.addHandler(logging.NullHandler())

# -----------------------------------------------------------------------------
# CLASSES
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# FUNCTIONS
# -----------------------------------------------------------------------------

def get_pb_ctrl_irq_mute(clear_lb=True):
    # Perform read-modify-write operation on the GPIO 0 register
    val = DevMem.read(REG_GPIO_0_ADDRESS)

    if val & (1 << REG_GPIO_0_PB_CTRL_IRQ_BIT):
        return 1
    else:
        if clear_lb:
            DevMem.write(REG_GPIO_0_ADDRESS, val | (1 << REG_GPIO_0_PB_CTRL_IRQ_BIT))
        return 0


def main(argv):
    """
    Reads and returns the push-button controller interrupt signal state
    :param argv: argv[1]: '0' = de-assert; non-zero assert
    :return: N/A
    """
    print("PWR_BTN_INT_N - {}".format("De-asserted" if get_pb_ctrl_irq_mute() else "Asserted"))


# -----------------------------------------------------------------------------
# RUNTIME PROCEDURE
# -----------------------------------------------------------------------------
if __name__ == '__main__':
    """
    Run main() routine
    """
    main(sys.argv[1:])
