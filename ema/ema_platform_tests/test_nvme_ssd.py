#!/usr/bin/env python3
import subprocess
import os
import pathlib
from monkeytest import Benchmark

TEST_FILE_NAME = "/tmp/nvme_test_file"
TEST_FILE_SIZE_MEGABYTES = 128
WRITE_BLOCK_SIZE_BYTES = 4096
READ_BLOCK_SIZE_BYTES = 4096
WRITE_MIN_SPEED_MBPS = 50
READ_MIN_SPEED_MBPS = 70


def system_command(cmd):
    ok = True
    resp = ""
    try:
        resp = subprocess.check_output(cmd.split(), stderr=subprocess.DEVNULL).decode("utf-8").splitlines()
    except subprocess.CalledProcessError:
        ok = False
    return ok, resp


def mount_nvme_ssd():
    # Attempt to mount the device
    system_command("/bin/umount /dev/nvme0n1")
    system_command("/bin/mount /dev/nvme0n1 /tmp")
    # Check that the device mounted correctly
    ok, resp = system_command("/bin/mount")
    if ok:
        for line in resp:
            if "/dev/nvme0n1 on /var/volatile/tmp type ext4 (rw,relatime,data=ordered)" in line:
                return True
    return False


def format_nvme_ssd():
    print()
    print("Formatting NVMe SSD, step typically takes ~12 seconds... ", end="", flush=True)
    ok, resp = system_command("{}/format_nvme_ssd.sh".format(pathlib.Path(__file__).parent.resolve()))
    if ok:
        # Check through the 'format_nvme_ssd.sh' output lines
        for line in resp:
            if "Writing superblocks and filesystem accounting information" in line and "done" in line:
                print("OK")
                print()
                return True
    return False


def run_test():
    nvme_device_found = False
    nvme_driver_attached = False
    nvme_node_found = False
    nvme_sectors_ok = False
    nvme_mount_ok = False
    nvme_rw_test_ok = False
    nvme_sectors = "?"
    min_sectors = 900000000  # GreenLiant 480 GB SSD reports 937703088

    print("")
    print("test_nvme_ssd")
    print("----------------")
    ok, resp = system_command("/usr/bin/lspci -vv")
    if ok:
        for line in resp:
            if nvme_device_found and "Kernel driver in use: nvme" in line:
                nvme_driver_attached = True
            if "Non-Volatile memory controller" in line and "[NVM Express]" in line:
                nvme_device_found = True

    if nvme_driver_attached:
        ok, resp = system_command("/bin/ls /dev/nvme0n1")
        if ok:
            # Check through the 'ls' output lines
            for line in resp:
                if "/dev/nvme0n1" in line:
                    nvme_node_found = True

    if nvme_node_found:
        ok, resp = system_command("/sbin/fdisk -l /dev/nvme0n1")
        if ok:
            # Check through the 'fdisk' output lines
            for line in resp:
                if "Disk /dev/nvme0n1:" in line:
                    fields = line.split(',')
                    for field in fields:
                        if "sectors" in field:
                            field_filter = filter(str.isdigit, field)
                            field_digits = "".join(field_filter)
                            nvme_sectors = int(field_digits)
                            nvme_sectors_ok = nvme_sectors >= min_sectors

    print("NVMe Device Found:    {}".format(nvme_device_found))
    print("NVMe Driver Attached: {}".format(nvme_driver_attached))
    print("NVMe Node Found:      {}".format(nvme_node_found))
    print("Number Sectors OK:    {} ({})".format(nvme_sectors_ok, nvme_sectors))

    # Try to mount NVMEe SSD, if it fails then format the SSD and try to mount once more
    if nvme_sectors_ok:
        if mount_nvme_ssd():
            nvme_mount_ok = True
        elif format_nvme_ssd():
            nvme_mount_ok = mount_nvme_ssd()

    print("NVME Mount OK:        {}".format(nvme_mount_ok))

    if nvme_mount_ok:
        benchmark = Benchmark(TEST_FILE_NAME, TEST_FILE_SIZE_MEGABYTES, WRITE_BLOCK_SIZE_BYTES, READ_BLOCK_SIZE_BYTES)
        # Remove the file generated by the benchmark function
        system_command("/bin/rm {}".format(TEST_FILE_NAME))
        # Calculate benchmark read/write speeds
        write_speed = benchmark.write_mb / sum(benchmark.write_results)
        read_speed = benchmark.write_mb / sum(benchmark.read_results)
        # Test speeds against hard-coded limits
        write_speed_ok = write_speed >= WRITE_MIN_SPEED_MBPS
        read_speed_ok = read_speed >= READ_MIN_SPEED_MBPS
        print()
        print("Write Speed OK:       {} ({:.2f} MB/s)".format(write_speed_ok, write_speed))
        print("Read Speed OK:        {} ({:.2f} MB/s)".format(read_speed_ok, read_speed))
        nvme_rw_test_ok = write_speed_ok and read_speed_ok

    return nvme_rw_test_ok


if __name__ == "__main__":
    if run_test():
        print("\n*** OK - test passed ***\n")
    else:
        print("\n*** TEST FAILED ***\n")
